// This file is auto-generated by @hey-api/openapi-ts

export const AvatarRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['token', 'id'],
    title: 'AvatarRequest'
} as const;

export const DeleteReportRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['token', 'id'],
    title: 'DeleteReportRequest'
} as const;

export const FormSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        sex: {
            '$ref': '#/components/schemas/UserSex'
        },
        birth: {
            type: 'string',
            format: 'date',
            title: 'Birth'
        },
        phone: {
            type: 'string',
            title: 'Phone'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        address: {
            type: 'string',
            title: 'Address'
        }
    },
    type: 'object',
    title: 'Form'
} as const;

export const GetImageRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['token', 'id'],
    title: 'GetImageRequest'
} as const;

export const GetReportRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'GetReportRequest'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ImageTypeSchema = {
    type: 'integer',
    enum: [0, 1],
    title: 'ImageType'
} as const;

export const LoginRequestSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'LoginRequest'
} as const;

export const LoginResponseSchema = {
    properties: {
        code: {
            type: 'integer',
            title: 'Code',
            default: 0
        },
        message: {
            type: 'string',
            title: 'Message',
            default: ''
        },
        token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'LoginResponse'
} as const;

export const RegisterRequestSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        type: {
            '$ref': '#/components/schemas/UserType'
        }
    },
    type: 'object',
    required: ['username', 'password', 'type'],
    title: 'RegisterRequest'
} as const;

export const ReportDetailRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['token', 'id'],
    title: 'ReportDetailRequest'
} as const;

export const ReportImageRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/ImageType'
        }
    },
    type: 'object',
    required: ['token', 'id', 'type'],
    title: 'ReportImageRequest'
} as const;

export const ReportRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        doctor: {
            type: 'string',
            title: 'Doctor'
        },
        images: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Images'
        }
    },
    type: 'object',
    required: ['token', 'doctor', 'images'],
    title: 'ReportRequest'
} as const;

export const SubmitInfoRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        form: {
            '$ref': '#/components/schemas/Form'
        }
    },
    type: 'object',
    required: ['token', 'form'],
    title: 'SubmitInfoRequest'
} as const;

export const TokenRequestSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'TokenRequest'
} as const;

export const UserSexSchema = {
    type: 'integer',
    enum: [0, 1],
    title: 'UserSex'
} as const;

export const UserTypeSchema = {
    type: 'integer',
    enum: [0, 1],
    title: 'UserType'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;